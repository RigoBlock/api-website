webpackJsonp([0x6741ba59de49],{423:function(e,t){e.exports={data:{postBySlug:{html:'<h1 id="overview"><a href="#overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h1>\n<p>The RigoBlock API is a programming interface written in TypeScript to interact with the <a href="https://github.com/RigoBlock/rigoblock-monorepo/tree/master/packages/contracts#contracts">RigoBlock Protocol</a> solidity smart contracts.</p>\n<p>It is automatically generated from the JSON ABI files of the compiled solidity contracts. The contract ABIs are extracted from our contracts package and saved to a temporary directory. We then use 0x\'s library <a href="https://github.com/0xProject/0x-monorepo/tree/master/packages/abi-gen">abi-gen</a>, in conjunction with our custom template written in <a href="https://handlebarsjs.com/">handlebars</a> to map over the ABI methods and create the TypeScript files. The template can easily be modified to allows us to add extra methods if needed.</p>\n<p>Using the API a user can create and manage decentralized token pools, as well as purchase shares of said pools and many other features that come from the various contracts.</p>'}},pathContext:{slug:"/api/1.overview",category:"guides"}}}});